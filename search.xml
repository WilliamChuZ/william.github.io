<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SpringMVC常用注解</title>
      <link href="/william.github.io/2020/03/19/SpringMVC%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/"/>
      <url>/william.github.io/2020/03/19/SpringMVC%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>　　Spring提供了一系列注解，有很多作用，此处对spring核心包注解和部分常用注解做归纳和总结。</p><a id="more"></a><p>** 组件型注解：**<br>@Component 在类定义之前添加@Component注解，他会被spring容器识别，并转为bean。<br>@Repository 对Dao实现类进行注解 (特殊的@Component)<br>@Service 用于对业务逻辑层进行注解， (特殊的@Component)<br>@Controller 用于控制层注解 ， (特殊的@Component)，</p><h3 id="1-Controller"><a href="#1-Controller" class="headerlink" title="1.@Controller"></a>1.@Controller</h3><p>　　在SpringMVC 中，控制器Controller 负责处理由DispatcherServlet 分发的请求，它把用户请求的数据经过业务处理层处理之后封装成一个Model ，然后再把该Model 返回给对应的View 进行展示。在SpringMVC 中提供了一个非常简便的定义Controller 的方法，你无需继承特定的类或实现特定的接口，只需使用@Controller 标记一个类是Controller ，然后使用@RequestMapping 和@RequestParam 等一些注解用以定义URL 请求和Controller 方法之间的映射，这样的Controller 就能被外界访问到。此外Controller 不会直接依赖于HttpServletRequest 和HttpServletResponse 等HttpServlet 对象，它们可以通过Controller 的方法参数灵活的获取到。<br>　　@Controller 用于标记在一个类上，使用它标记的类就是一个SpringMVC Controller对象。分发处理器将会扫描使用了该注解的类的方法，并检测该方法是否使用了@RequestMapping 注解。@Controller 只是定义了一个控制器类，而使用@RequestMapping 注解的方法才是真正处理请求的处理器。单单使用@Controller 标记在一个类上还不能真正意义上的说它就是SpringMVC 的一个控制器类，因为这个时候Spring 还不认识它。那么要如何做Spring 才能认识它呢？这个时候就需要我们把这个控制器类交给Spring 来管理。有两种方式：<br>　　（1）在SpringMVC 的配置文件中定义MyController 的bean 对象。<br>　　（2）在SpringMVC 的配置文件中告诉Spring 该到哪里去找标记为@Controller 的Controller 控制器。</p><!--方式一--><pre><code>&lt;bean class=&quot;com.host.app.web.controller.MyController&quot;/&gt;</code></pre><!--方式二--><pre><code>&lt; context:component-scan base-package = &quot;com.host.app.web&quot; /&gt;//路径写到controller的上一层(扫描包详解见下面浅析)</code></pre><h3 id="2-RequestMapping"><a href="#2-RequestMapping" class="headerlink" title="2.@RequestMapping"></a>2.@RequestMapping</h3><p>　　RequestMapping是一个用来处理请求地址映射的注解，可用于类或方法上。用于类上，表示类中的所有响应请求的方法都是以该地址作为父路径。<br>RequestMapping注解有六个属性，下面我们把她分成三类进行说明（下面有相应示例）。<br>1、 value， method；<br>　　value：     指定请求的实际地址，指定的地址可以是URI Template 模式（后面将会说明）；<br>　　method：  指定请求的method类型， GET、POST、PUT、DELETE等；<br>2、consumes，produces<br>　　consumes： 指定处理请求的提交内容类型（Content-Type），例如application/json, text/html;<br>　　produces:    指定返回的内容类型，仅当request请求头中的(Accept)类型中包含该指定类型才返回；<br>3、params，headers<br>　　params： 指定request中必须包含某些参数值是，才让该方法处理。<br>　　headers： 指定request中必须包含某些指定的header值，才能让该方法处理请求。</p><h3 id="3-Resource和-Autowired"><a href="#3-Resource和-Autowired" class="headerlink" title="3.@Resource和@Autowired"></a>3.@Resource和@Autowired</h3><p>　　@Resource和@Autowired都是做bean的注入时使用，其实@Resource并不是Spring的注解，它的包是javax.annotation.Resource，需要导入，但是Spring支持该注解的注入。<br>** 1、共同点**<br>　　两者都可以写在字段和setter方法上。两者如果都写在字段上，那么就不需要再写setter方法。<br>** 2、不同点**<br>（1）@Autowired<br>　　@Autowired为Spring提供的注解，需要导入包<code>org.springframework.beans.factory.annotation.Autowired;</code>只按照byType注入。</p><figure class="highlight plain"><figcaption><span>class TestServiceImpl &#123;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">    &#x2F;&#x2F; 下面两种@Autowired只要使用一种即可</span><br><span class="line">    @Autowired</span><br><span class="line">    private UserDao userDao; &#x2F;&#x2F; 用于字段上</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    public void setUserDao(UserDao userDao) &#123; &#x2F;&#x2F; 用于属性的方法上</span><br><span class="line">this.userDao &#x3D; userDao;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　@Autowired注解是按照类型（byType）装配依赖对象，默认情况下它要求依赖对象必须存在，如果允许null值，可以设置它的required属性为false。如果我们想使用按照名称（byName）来装配，可以结合@Qualifier注解一起使用。如下：</p><figure class="highlight plain"><figcaption><span>class TestServiceImpl &#123;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">    @Autowired</span><br><span class="line">    @Qualifier(&quot;userDao&quot;)</span><br><span class="line">    private UserDao userDao; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）@Resource<br>　　@Resource默认按照ByName自动注入，由J2EE提供，需要导入包javax.annotation.Resource。@Resource有两个重要的属性：name和type，而Spring将@Resource注解的name属性解析为bean的名字，而type属性则解析为bean的类型。所以，如果使用name属性，则使用byName的自动注入策略，而使用type属性时则使用byType自动注入策略。如果既不制定name也不制定type属性，这时将通过反射机制使用byName自动注入策略。</p><figure class="highlight plain"><figcaption><span>class TestServiceImpl &#123;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">    &#x2F;&#x2F; 下面两种@Resource只要使用一种即可</span><br><span class="line">    @Resource(name&#x3D;&quot;userDao&quot;)</span><br><span class="line">    private UserDao userDao; &#x2F;&#x2F; 用于字段上</span><br><span class="line">    </span><br><span class="line">    @Resource(name&#x3D;&quot;userDao&quot;)</span><br><span class="line">    public void setUserDao(UserDao userDao) &#123; &#x2F;&#x2F; 用于属性的setter方法上</span><br><span class="line">        this.userDao &#x3D; userDao;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：最好是将@Resource放在setter方法上，因为这样更符合面向对象的思想，通过set、get去操作属性，而不是直接去操作属性。<br>@Resource装配顺序：<br>①如果同时指定了name和type，则从Spring上下文中找到唯一匹配的bean进行装配，找不到则抛出异常。<br>②如果指定了name，则从上下文中查找名称（id）匹配的bean进行装配，找不到则抛出异常。<br>③如果指定了type，则从上下文中找到类似匹配的唯一bean进行装配，找不到或是找到多个，都会抛出异常。<br>④如果既没有指定name，又没有指定type，则自动按照byName方式进行装配；如果没有匹配，则回退为一个原始类型进行匹配，如果匹配则自动装配。<br>@Resource的作用相当于@Autowired，只不过@Autowired按照byType自动注入。</p><h3 id="4-ModelAttribute和-SessionAttributes"><a href="#4-ModelAttribute和-SessionAttributes" class="headerlink" title="4.@ModelAttribute和 @SessionAttributes"></a>4.@ModelAttribute和 @SessionAttributes</h3><p>　　代表的是：该Controller的所有方法在调用前，先执行此@ModelAttribute方法，可用于注解和方法参数中，可以把这个@ModelAttribute特性，应用在BaseController当中，所有的Controller继承BaseController，即可实现在调用Controller时，先执行@ModelAttribute方法。<br> @SessionAttributes即将值放到session作用域中，写在class上面。<br>具体示例参见下面：使用 @ModelAttribute 和 @SessionAttributes 传递和保存数据</p><h3 id="5-PathVariable"><a href="#5-PathVariable" class="headerlink" title="5.@PathVariable"></a>5.@PathVariable</h3><p>　　用于将请求URL中的模板变量映射到功能处理方法的参数上，即取出uri模板中的变量作为参数。如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public class TestController &#123;  </span><br><span class="line">     @RequestMapping(value&#x3D;&quot;&#x2F;user&#x2F;&#123;userId&#125;&#x2F;roles&#x2F;&#123;roleId&#125;&quot;,method &#x3D; RequestMethod.GET)  </span><br><span class="line">     public String getLogin(@PathVariable(&quot;userId&quot;) String userId,  </span><br><span class="line">         @PathVariable(&quot;roleId&quot;) String roleId)&#123;  </span><br><span class="line">         System.out.println(&quot;User Id : &quot; + userId);  </span><br><span class="line">         System.out.println(&quot;Role Id : &quot; + roleId);  </span><br><span class="line">         return &quot;hello&quot;;  </span><br><span class="line">     &#125;  </span><br><span class="line">     @RequestMapping(value&#x3D;&quot;&#x2F;product&#x2F;&#123;productId&#125;&quot;,method &#x3D; RequestMethod.GET)  </span><br><span class="line">     public String getProduct(@PathVariable(&quot;productId&quot;) String productId)&#123;  </span><br><span class="line">           System.out.println(&quot;Product Id : &quot; + productId);  </span><br><span class="line">           return &quot;hello&quot;;  </span><br><span class="line">     &#125;  </span><br><span class="line">     @RequestMapping(value&#x3D;&quot;&#x2F;javabeat&#x2F;&#123;regexp1:[a-z-]+&#125;&quot;,  </span><br><span class="line">           method &#x3D; RequestMethod.GET)  </span><br><span class="line">     public String getRegExp(@PathVariable(&quot;regexp1&quot;) String regexp1)&#123;  </span><br><span class="line">           System.out.println(&quot;URI Part 1 : &quot; + regexp1);  </span><br><span class="line">           return &quot;hello&quot;;  </span><br><span class="line">     &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-requestParam"><a href="#6-requestParam" class="headerlink" title="6.@requestParam"></a>6.@requestParam</h3><p>　　@requestParam主要用于在SpringMVC后台控制层获取参数，类似一种是request.getParameter(“name”)，它有三个常用参数：defaultValue = “0”, required = false, value = “isApp”；defaultValue 表示设置默认值，required 铜过boolean设置是否是必须要传入的参数，value 值表示接受的传入的参数类型。</p><h3 id="7-ResponseBody"><a href="#7-ResponseBody" class="headerlink" title="7.@ResponseBody"></a>7.@ResponseBody</h3><p>　　作用： 该注解用于将Controller的方法返回的对象，通过适当的HttpMessageConverter转换为指定格式后，写入到Response对象的body数据区。<br>使用时机：返回的数据不是html标签的页面，而是其他某种格式的数据时（如json、xml等）使用；</p><h3 id="8-Component"><a href="#8-Component" class="headerlink" title="8.@Component"></a>8.@Component</h3><p>　　相当于通用的注解，当不知道一些类归到哪个层时使用，但是不建议。</p><h3 id="9-Repository"><a href="#9-Repository" class="headerlink" title="9.@Repository"></a>9.@Repository</h3><p>　　用于注解dao层，在daoImpl类上面注解。</p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring与SpringMVC的区别</title>
      <link href="/william.github.io/2020/03/19/Spring%E4%B8%8ESpringMVC%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/william.github.io/2020/03/19/Spring%E4%B8%8ESpringMVC%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Spring的介绍"><a href="#1-Spring的介绍" class="headerlink" title="1.Spring的介绍"></a>1.Spring的介绍</h2><p>​        Spring是一个一站式的框架，提供了表现层（SpringMVC）到业务层（Spring）再到数据层（SpringData)的全套解决方案；Spring的两大核心是IOC与AOP，IOC（控制反转，Inversion of Control）与AOP（面向切面编程，Asepct-Orentid-Programming）为程序解耦和代码的简洁提供了支持。<a id="more"></a><br>目的：简化Java开发</p><p>功能：使用基本的JavaBean代替EJB，并提供了更多的企业应用功能</p><p>范围：所有java应用</p><p>​        Spring是个轻量级的控制反转和面向切面的容器框架，IOC与AOP可以单独用于任何应用，包括与Struts等MVC框架与Hibernate等ORM框架的集成。</p><h2 id="2-SpringMVC的介绍"><a href="#2-SpringMVC的介绍" class="headerlink" title="2.SpringMVC的介绍"></a>2.SpringMVC的介绍</h2><p>​        SpringMVC给Spring的表现层提供支持</p><p>SpringMVC的流程：</p><p>用户发送请求至前端控制器DispatcherServlet；</p><p>DispatcherServlet收到请求调用HandlerMapping处理器映射器；</p><p>处理器映射器根据请求url找到具体的处理器，生成处理器对象及处理器拦截器(如果有则生成)一并返回给DispatcherServlet；</p><p>DispatcherServlet通过HandlerAdapter处理器适配器调用处理器，执行处理器(Controller，也叫后端控制器)；</p><p>Controller执行完成返回ModelAndView，并返回给HandlerAdapter，HandlerAdapter将结果返回给DispatcherServlet；</p><p>DispatcherServlet将ModelAndView传给ViewReslover视图解析器，ViewReslover解析后返回具体View给DispatcherServlet；</p><p>DispatcherServlet对View进行渲染视图（即将模型数据填充至视图中）后返回给给客户</p><p>SpringMVC就是一个MVC模式的web开发框架，都属于Spring，SpringMVC需要有Spring的jar包作为支撑才能跑起来</p><h2 id="3-AOP与IOC"><a href="#3-AOP与IOC" class="headerlink" title="3.AOP与IOC"></a>3.AOP与IOC</h2><p>​        AOP与IOC给Spring的业务层提供支持，使程序松耦合，代码简洁<br>AOP原理：即面向切面编程，就是提取公共部分，集中解决一些公共问题<br>IOC原理：控制反转，在传统过程中，当某一个对象依赖于另一个对象时，会由该对象去创建另外一个对象。但是有了IOC之后，将创建过程交给IOC，由spring创建Bean，从而只需给该对象注入即可。</p><h2 id="4-IOC与DI的区别与联系"><a href="#4-IOC与DI的区别与联系" class="headerlink" title="4.IOC与DI的区别与联系"></a>4.IOC与DI的区别与联系</h2><p>（1）IOC：控制反转（Inversion of Control）</p><p>​        传统资源查找方式：要求组件向容器发起请求，查找资源作为回应，容器适时返回资源。<br>​        IOC查找方式：容器主动将资源提供给它所管理的组件，组件只需要选择一个合适的方式来接收资源。<br>​        创建对象实例的控制权由代码控制转移到IOC容器控制（new关键字转移到容器），即在XML文件中控制，控制权转移即所谓的反转，侧重于原理。<br>（2）DI：依赖注入（Dependecy Injection）</p><p>​        IOC另一种表达方式：组件以一些预先定义好的方式（如setter\getter)接收来自容器的资源注入。相对于IOC，DI更直接<br>创建对象实例时，为这个对象注入属性值和其他对象实例，侧重于实现。<br>（3）属性注入</p><p>set方法注入bean的属性值或依赖的对象</p><p>name属性：制定bean属性set方法后的属性名</p><p>value属性：可以使（value)子节点指定属性值</p><p>（4）构造器注入</p><p>通过构造器注入bean属性值或依赖对象，它保证bean实例在实例化后可以使用 。<br>（5）区别</p><p>他们是spring核心思想的不同方面的描述</p><p>依赖注入和控制反转是对同一件事情的不同描述，从某个方面讲，就是他们描述的角度不同</p><p>依赖注入是从应用程序的角度在描述，应用程序依赖容器创建并注入它所需要的外部资源</p><p>控制反转是从容器的角度在描述，容器控制应用程序，而容器反向的向应用程序注入应用程序所需要的外部资源</p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC流程</title>
      <link href="/william.github.io/2020/03/19/SpringMVC%E6%B5%81%E7%A8%8B/"/>
      <url>/william.github.io/2020/03/19/SpringMVC%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p><strong>SpringMVC是什么：</strong> </p><p>　　SpringMVC是一个MVC的开源框架，SpringMVC=Struts2+Spring，SpringMVC就相当于是Struts2加上Spring的整合，但是这里有一个疑惑就是，SpringMVC和Spring是什么样的关系呢？<a id="more"></a>这个在百度百科上有一个很好的解释：意思是说，SpringMVC是Spring的一个后续产品，其实就是Spring在原有基础上，又提供了Web应用的MVC模块，可以简单的把SpringMVC理解为是Spring的一个模块（类似AOP，IOC这样的模块），网络上经常会说SpringMVC和Spring无缝集成，其实SpringMVC就是Spring的一个子模块，所以根本不需要同Spring进行整合。</p><p><img src="https://images2015.cnblogs.com/blog/249993/201612/249993-20161212142542042-2117679195.jpg" alt="img"></p><h2 id="SpringMVC流程"><a href="#SpringMVC流程" class="headerlink" title="SpringMVC流程"></a>SpringMVC流程</h2><p>1、  用户发送请求至前端控制器DispatcherServlet。</p><p>2、  DispatcherServlet收到请求调用HandlerMapping处理器映射器。</p><p>3、  处理器映射器找到具体的处理器(可以根据xml配置、注解进行查找)，生成处理器对象及处理器拦截器(如果有则生成)一并返回给DispatcherServlet。</p><p>4、  DispatcherServlet调用HandlerAdapter处理器适配器。</p><p>5、  HandlerAdapter经过适配调用具体的处理器(Controller，也叫后端控制器)。</p><p>6、  Controller执行完成返回ModelAndView。</p><p>7、  HandlerAdapter将controller执行结果ModelAndView返回给DispatcherServlet。</p><p>8、  DispatcherServlet将ModelAndView传给ViewReslover视图解析器。</p><p>9、  ViewReslover解析后返回具体View。</p><p>10、DispatcherServlet根据View进行渲染视图（即将模型数据填充至视图中）。</p><p>11、 DispatcherServlet响应用户。</p><h2 id="组件说明："><a href="#组件说明：" class="headerlink" title="组件说明："></a>组件说明：</h2><p>以下组件通常使用框架提供实现：</p><p>DispatcherServlet：作为前端控制器，整个流程控制的中心，控制其它组件执行，统一调度，降低组件之间的耦合性，提高每个组件的扩展性。</p><p>HandlerMapping：通过扩展处理器映射器实现不同的映射方式，例如：配置文件方式，实现接口方式，注解方式等。 </p><p>HandlAdapter：通过扩展处理器适配器，支持更多类型的处理器。</p><p>ViewResolver：通过扩展视图解析器，支持更多类型的视图解析，例如：jsp、freemarker、pdf、excel等。</p><h3 id="组件："><a href="#组件：" class="headerlink" title="组件："></a>组件：</h3><h4 id="1、前端控制器DispatcherServlet"><a href="#1、前端控制器DispatcherServlet" class="headerlink" title="1、前端控制器DispatcherServlet"></a>1、前端控制器DispatcherServlet</h4><p>作用：接收请求，响应结果，相当于转发器，中央处理器。有了dispatcherServlet减少了其它组件之间的耦合度。</p><p>用户请求到达前端控制器，它就相当于mvc模式中的c，dispatcherServlet是整个流程控制的中心，由它调用其它组件处理用户的请求，dispatcherServlet的存在降低了组件之间的耦合性。</p><h4 id="2、处理器映射器HandlerMapping"><a href="#2、处理器映射器HandlerMapping" class="headerlink" title="2、处理器映射器HandlerMapping"></a>2、处理器映射器HandlerMapping</h4><p>作用：根据请求的url查找Handler</p><p>HandlerMapping负责根据用户请求找到Handler即处理器，springmvc提供了不同的映射器实现不同的映射方式，例如：配置文件方式，实现接口方式，注解方式等。</p><h4 id="3、处理器适配器HandlerAdapter"><a href="#3、处理器适配器HandlerAdapter" class="headerlink" title="3、处理器适配器HandlerAdapter"></a>3、处理器适配器HandlerAdapter</h4><p>作用：按照特定规则（HandlerAdapter要求的规则）去执行Handler</p><p>通过HandlerAdapter对处理器进行执行，这是适配器模式的应用，通过扩展适配器可以对更多类型的处理器进行执行。</p><h4 id="4、处理器Handler"><a href="#4、处理器Handler" class="headerlink" title="4、处理器Handler"></a>4、处理器Handler</h4><p><strong>注意：编写Handler时按照HandlerAdapter的要求去做，这样适配器才可以去正确执行Handler</strong></p><p>Handler 是继DispatcherServlet前端控制器的后端控制器，在DispatcherServlet的控制下Handler对具体的用户请求进行处理。</p><p>由于Handler涉及到具体的用户业务请求，所以一般情况需要工程师根据业务需求开发Handler。</p><h4 id="5、视图解析器View-resolver"><a href="#5、视图解析器View-resolver" class="headerlink" title="5、视图解析器View resolver"></a>5、视图解析器View resolver</h4><p>作用：进行视图解析，根据逻辑视图名解析成真正的视图（view）</p><p>View Resolver负责将处理结果生成View视图，View Resolver首先根据逻辑视图名解析成物理视图名即具体的页面地址，再生成View视图对象，最后对View进行渲染将处理结果通过页面展示给用户。 springmvc框架提供了很多的View视图类型，包括：jstlView、freemarkerView、pdfView等。</p><p>一般情况下需要通过页面标签或页面模版技术将模型数据通过页面展示给用户，需要由工程师根据业务需求开发具体的页面。</p><h4 id="6、视图View"><a href="#6、视图View" class="headerlink" title="6、视图View"></a>6、视图View</h4><p>View是一个接口，实现类支持不同的View类型（jsp、freemarker、pdf…）</p><h3 id="核心架构的具体流程"><a href="#核心架构的具体流程" class="headerlink" title="核心架构的具体流程"></a>核心架构的具体流程</h3><p><strong>步骤如下：</strong></p><p>1、首先用户发送请求——&gt;DispatcherServlet，前端控制器收到请求后自己不进行处理，而是委托给其他的解析器进行处理，作为统一访问点，进行全局的流程控制；</p><p>2、DispatcherServlet——&gt;HandlerMapping， HandlerMapping 将会把请求映射为HandlerExecutionChain 对象（包含一个Handler 处理器（页面控制器）对象、多个HandlerInterceptor 拦截器）对象，通过这种策略模式，很容易添加新的映射策略；</p><p>3、DispatcherServlet——&gt;HandlerAdapter，HandlerAdapter 将会把处理器包装为适配器，从而支持多种类型的处理器，即适配器设计模式的应用，从而很容易支持很多类型的处理器；</p><p>4、HandlerAdapter——&gt;处理器功能处理方法的调用，HandlerAdapter 将会根据适配的结果调用真正的处理器的功能处理方法，完成功能处理；并返回一个ModelAndView 对象（包含模型数据、逻辑视图名）；</p><p>5、ModelAndView的逻辑视图名——&gt; ViewResolver， ViewResolver 将把逻辑视图名解析为具体的View，通过这种策略模式，很容易更换其他视图技术；</p><p>6、View——&gt;渲染，View会根据传进来的Model模型数据进行渲染，此处的Model实际是一个Map数据结构，因此很容易支持其他视图技术；</p><p>7、返回控制权给DispatcherServlet，由DispatcherServlet返回响应给用户，到此一个流程结束。</p><p>下边两个组件通常情况下需要开发：</p><p>Handler：处理器，即后端控制器用controller表示。</p><p>View：视图，即展示给用户的界面，视图中通常需要标签语言展示模型数据。</p><p><strong>在将SpringMVC之前我们先来看一下什么是MVC模式</strong></p><p>MVC：MVC是一种设计模式</p><p>MVC的原理图：</p><p><img src="https://images2015.cnblogs.com/blog/249993/201702/249993-20170207135959401-404841652.png" alt="img"></p><p><strong>分析：</strong></p><p>M-Model 模型（完成业务逻辑：有javaBean构成，service+dao+entity）</p><p>V-View 视图（做界面的展示  jsp，html……）</p><p>C-Controller 控制器（接收请求—&gt;调用模型—&gt;根据结果派发页面）</p><h3 id="SpringMVC原理图"><a href="#SpringMVC原理图" class="headerlink" title="SpringMVC原理图"></a>SpringMVC原理图</h3><p><img src="https://images2015.cnblogs.com/blog/249993/201702/249993-20170207140151791-1932120070.png" alt="img"></p><p><strong>看到这个图大家可能会有很多的疑惑，现在我们来看一下这个图的步骤：（可以对比MVC的原理图进行理解）</strong></p><p>第一步:用户发起请求到前端控制器（DispatcherServlet）</p><p>第二步：前端控制器请求处理器映射器（HandlerMappering）去查找处理器（Handle）：通过xml配置或者注解进行查找</p><p>第三步：找到以后处理器映射器（HandlerMappering）像前端控制器返回执行链（HandlerExecutionChain）</p><p>第四步：前端控制器（DispatcherServlet）调用处理器适配器（HandlerAdapter）去执行处理器（Handler）</p><p>第五步：处理器适配器去执行Handler</p><p>第六步：Handler执行完给处理器适配器返回ModelAndView</p><p>第七步：处理器适配器向前端控制器返回ModelAndView</p><p>第八步：前端控制器请求视图解析器（ViewResolver）去进行视图解析</p><p>第九步：视图解析器像前端控制器返回View</p><p>第十步：前端控制器对视图进行渲染</p><p>第十一步：前端控制器向用户响应结果</p><p><strong>看到这些步骤我相信大家很感觉非常的乱，这是正常的，但是这里主要是要大家理解springMVC中的几个组件：</strong></p><p>前端控制器（DispatcherServlet）：接收请求，响应结果，相当于电脑的CPU。</p><p>处理器映射器（HandlerMapping）：根据URL去查找处理器</p><p>处理器（Handler）：（需要程序员去写代码处理逻辑的）</p><p>处理器适配器（HandlerAdapter）：会把处理器包装成适配器，这样就可以支持多种类型的处理器，类比笔记本的适配器（适配器模式的应用）</p><p>视图解析器（ViewResovler）：进行视图解析，多返回的字符串，进行处理，可以解析成对应的页面</p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见的几种缓存算法</title>
      <link href="/william.github.io/2020/03/17/%E5%B8%B8%E8%A7%81%E7%9A%84%E5%87%A0%E7%A7%8D%E7%BC%93%E5%AD%98%E7%AE%97%E6%B3%95/"/>
      <url>/william.github.io/2020/03/17/%E5%B8%B8%E8%A7%81%E7%9A%84%E5%87%A0%E7%A7%8D%E7%BC%93%E5%AD%98%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>缓存 : 凡是位于速度相差较大的两种硬件之间，用于协调两者数据传输速度差异的结构，均可称之为缓存（Cache）。</p><a id="more"></a><h2 id="1-缓存相关概念"><a href="#1-缓存相关概念" class="headerlink" title="1.缓存相关概念"></a>1.缓存相关概念</h2><p>​        </p><p>​        因为内存相对于硬盘读写速度更快，内存可以作为硬盘的缓存；同样的，硬盘读写速度远高于网络数据的读写速度，也可以将硬盘作为网络数据的缓存。在内存和硬盘之间，硬盘与网络之间，都存在某种意义上的Cache。</p><p>​        表现上，缓存载体与被缓存载体总是相对的，缓存设备成本高于被缓存设备，缓存设备速度高于被缓存设备，缓存设备容量远远小于被缓存设备。</p><p>​        缓存可以认为是数据的池子，是存储频繁使用的数据的临时的地方，缓存可以认为是原始数据的子集，它是从原始数据里复制出来的，并且为了能被取回，被加上了标志。</p><h3 id="1-1-命中与回源"><a href="#1-1-命中与回源" class="headerlink" title="1.1.命中与回源"></a>1.1.命中与回源</h3><p>​        当用户发起一个请求，我们的应用接受这个请求，并且如果是在第一次检查缓存的时候，需要去数据库读取产品信息。如果在缓存中，一个条目通过一个标记被找到了，这个条目就会被使用、我们就叫它缓存命中。</p><p>​        如果没有命中缓存，就需要从原始地址获取，这个步骤叫做“回源”。回源的代价是高昂的，只有尽可能减少回源才能更好的发挥缓存的作用，但受限于缓存设备的成本，不能仅仅增加缓存容量，只能在成本和回源率之间寻求一个平衡点。</p><h3 id="1-2-缓存未命中-Cache-Miss"><a href="#1-2-缓存未命中-Cache-Miss" class="headerlink" title="1.2.缓存未命中(Cache Miss)"></a>1.2.缓存未命中(Cache Miss)</h3><p>​        如果还有缓存的空间，那么，没有命中的对象会被存储到缓存中来。</p><p>​        如果缓存满了，而又没有命中缓存，那么就会按照某一种策略，把缓存中的旧对象踢出，而把新的对象加入缓存池。而这些策略统称为替代策略（缓存算法），这些策略会决定到底应该踢出哪些对象。</p><h3 id="1-3-存储成本"><a href="#1-3-存储成本" class="headerlink" title="1.3.存储成本"></a>1.3.存储成本</h3><p>​        当没有命中时，我们会从数据库取出数据，然后放入缓存。而把这个数据放入缓存所需要的时间和空间，就是存储成本。</p><h3 id="1-4-失效"><a href="#1-4-失效" class="headerlink" title="1.4.失效"></a>1.4.失效</h3><p>​        当存在缓存中的数据需要更新时，就意味着缓存中的这个数据失效了。</p><h2 id="2-缓存算法"><a href="#2-缓存算法" class="headerlink" title="2. 缓存算法"></a>2. 缓存算法</h2><p>​        介于缓存只能够有限的使用内存，任何Cache系统都需要一个如何淘汰缓存的方案（缓存淘汰算法，等同于页面置换算法）。我们要根据自己的业务需要来选择使用何种算法来淘汰多余的数据，提高命中率。</p><p>常用的缓存算法有：</p><h3 id="2-1-LFU-Least-Frequently-Used"><a href="#2-1-LFU-Least-Frequently-Used" class="headerlink" title="2.1.LFU(Least Frequently Used)"></a>2.1.LFU(Least Frequently Used)</h3><p>​        根据数据的历史访问频率来淘汰数据，其核心思想是“如果数据过去被访问多次，那么将来被访问的频率也更高”。</p><p><strong>LFU</strong></p><p>​        LFU的每个数据块都有一个引用计数，所有数据块按照引用计数排序，具有相同引用计数的数据块则按照时间排序。</p><p>具体实现如下：</p><p><img src="http://note.youdao.com/yws/res/725/WEBRESOURCE6f6385c37579a9db7e68077d2a20e54a" alt="img"></p><p>​        假设我们的lfu最大的存储空间控制为5个，此时访问D,D现在的访问频率计数是26;</p><p>​        访问D后,D的频率+1,也就是27了。 此时需要调整缓存池数据需要重新排序,D和C交换;</p><p>​        访问B,B的频率+1,由于A的频率仍然比B大,所以不需要调整;</p><p>​        当新数据F插入缓存池之前,由于已经空间满了，需要干掉一个！ 因为E的频率最低,故淘汰E,将F插入缓存池,缓存池重新排序,F放到队尾.新加入数据插入到队列尾部（因为引用计数为1）队列中的数据被访问后，引用计数增加，队列重新排序,当需要淘汰数据时，将已经排序的列表最后的数据块删除</p><h3 id="2-2-LRU（LeastRecently-User）"><a href="#2-2-LRU（LeastRecently-User）" class="headerlink" title="2.2.LRU（LeastRecently User）"></a>2.2.LRU（LeastRecently User）</h3><p>​        根据数据的历史访问记录来进行淘汰数据，其核心思想是“如果数据最近被访问过，那么将来被访问的几率也更高”。</p><p><strong>LRU</strong></p><p>​        最常见的实现是使用一个链表保存缓存数据，详细算法实现如下：</p><p><img src="http://note.youdao.com/yws/res/723/WEBRESOURCEb95bdb597cc12a0e2fa9f0919403dc70" alt="img"></p><p>​        新数据插入到链表头部；</p><p>​        每当缓存命中（即缓存数据被访问），则将数据移到链表头部；</p><p>​        当链表满的时候，将链表尾部的数据丢弃。</p><p>​        当存在热点数据时，LRU的效率很好，但偶发性的、周期性的批量操作会导致LRU命中率急剧下降，缓存污染情况比较严重。</p><h3 id="2-3-LRU-K-LeastRecently-Used-K"><a href="#2-3-LRU-K-LeastRecently-Used-K" class="headerlink" title="2.3.LRU-K(LeastRecently Used K)"></a>2.3.LRU-K(LeastRecently Used K)</h3><p>​        相比LRU，LRU-K需要多维护一个队列，用于记录所有缓存数据被访问的历史。只有当数据的访问次数达到K次的时候，才将数据放入缓存。当需要淘汰数据时，LRU-K会淘汰第K次访问时间距当前时间最大的数据。详细实现如下：</p><p><img src="http://note.youdao.com/yws/res/726/WEBRESOURCE15d31820f457dd5cd2e2a4db06d9a3dd" alt="img"></p><p>​        数据第一次被访问，加入到访问历史列表；</p><p>​        如果数据在访问历史列表里后没有达到K次访问，则按照一定规则（FIFO，LRU）淘汰；</p><p>​        当访问历史队列中的数据访问次数达到K次后，将数据索引从历史队列删除，将数据移到缓存队列中，并缓存此数据，缓存队列重新按照时间排序；</p><p>​        缓存数据队列中被再次访问后，重新排序；</p><p>​        需要淘汰数据时，淘汰缓存队列中排在末尾的数据，即：淘汰“倒数第K次访问离现在最久”的数据。</p><p>​        LRU-K中的K代表最近使用的次数，因此LRU可以认为是LRU-1。大多数情况下，LRU算法对热点数据命中率是很高的。 但如果突然大量偶发性的数据访问，会让内存中存放大量冷数据，也即是缓存污染。LRU-K的主要目的是为了解决LRU算法“缓存污染”的问题，其核心思想是将“最近使用过1次”的判断标准扩展为“最近使用过K次”。</p><p>​        LRU-K具有LRU的优点，同时能够避免LRU的缺点，实际应用中LRU-2是综合各种因素后最优的选择，LRU-3或者更大的K值命中率会高，但适应性差，需要大量的数据访问才能将历史访问记录清除掉。</p><h3 id="2-4-FIFO-First-inFirst-out"><a href="#2-4-FIFO-First-inFirst-out" class="headerlink" title="2.4.FIFO(First inFirst out)"></a>2.4.FIFO(First inFirst out)</h3><p>​        最先进入的数据，最先被淘汰。一个很简单的算法。只要使用队列数据结构即可实现。那么FIFO淘汰算法基于的思想是”最近刚访问的，将来访问的可能性比较大”。</p><h3 id="2-5-2Q-Two-Queues"><a href="#2-5-2Q-Two-Queues" class="headerlink" title="2.5.2Q(Two Queues)"></a>2.5.2Q(Two Queues)</h3><p>​        同样也是为了解决LRU算法的缓存污染问题。类似于LRU-2，不同点在于2Q将LRU-2算法中的访问历史队列改为一个FIFO缓存队列，即：2Q算法有两个缓存队列，一个是FIFO队列，一个是LRU队列。</p><p>​        当数据第一次访问时，2Q算法将数据缓存在FIFO队列里面，当数据第二次被访问时，则将数据从FIFO队列移到LRU队列里面，两个队列各自按照自己的方法淘汰数据。详细实现如下：</p><p><img src="http://note.youdao.com/yws/res/724/WEBRESOURCE6a7e061c1c8fcfd77894caf077b8a212" alt="img"></p><p>​        新访问的数据插入到FIFO队列；</p><p>​        如果数据在FIFO队列中一直没有被再次访问，则最终按照FIFO规则淘汰；</p><p>​        如果数据在FIFO队列中被再次访问，则将数据移到LRU队列头部；</p><p>​        如果数据在LRU队列再次被访问，则将数据移到LRU队列头部；</p><p>​        LRU队列淘汰末尾的数据。</p><p>注：上图中FIFO队列比LRU队列短，但并不代表这是算法要求，实际应用中两者比例没有硬性规定。</p>]]></content>
      
      
      <categories>
          
          <category> cache </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 缓存算法 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/william.github.io/2020/03/17/hello-world/"/>
      <url>/william.github.io/2020/03/17/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hello World </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
